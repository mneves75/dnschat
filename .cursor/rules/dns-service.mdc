---
description: "DNS service architecture, query flow, and implementation details"
---
# DNS Service Architecture

## Overview
The DNS service ([src/services/dnsService.ts](mdc:src/services/dnsService.ts)) is the core of DNSChat's functionality. It handles DNS TXT record queries to enable chat-over-DNS communication.

## Query Flow

```
User Message → DNS Service → Native Module → DNS Server → Response → Parse → Display
                    ↓
                Fallbacks (TCP/DoH if UDP fails)
                    ↓
                Rate Limiting
                    ↓
                Logging
```

## Key Components

### 1. DNS Query Pipeline
- **Primary Method**: UDP queries via native module
- **Fallback Chain**: UDP → TCP → DNS-over-HTTPS (DoH)
- **Default Server**: `ch.at` (configurable in settings)
- **Query Types**: TXT records for message encoding

### 2. Input Sanitization
```typescript
// Always sanitize hostnames before queries
- Remove invalid characters
- Validate domain format
- Prevent DNS injection attacks
- Enforce length limits
```

### 3. Response Parsing
- Parse TXT records from DNS responses
- Handle multiple TXT records
- Decode base64/hex encoded messages
- Extract metadata (timestamps, signatures)

### 4. Rate Limiting
- Prevents DNS server abuse
- Configurable limits per second/minute
- Exponential backoff on errors
- See [__tests__/dnsService.rateLimit.spec.ts](mdc:__tests__/dnsService.rateLimit.spec.ts)

### 5. Error Handling
```typescript
// Structured error responses
interface DNSQueryError {
  code: 'TIMEOUT' | 'NXDOMAIN' | 'NETWORK_ERROR' | 'PARSE_ERROR';
  message: string;
  retry: boolean;
}
```

## Implementation Guidelines

### When Modifying DNS Service
1. **Maintain Fallback Chain**: Always preserve UDP → TCP → DoH fallback order
2. **Test All Paths**: Verify success, failure, and timeout scenarios
3. **Rate Limit Aware**: Respect rate limiting in all code paths
4. **Log Everything**: Use [dnsLogService](mdc:src/services/dnsLogService.ts) for debugging
5. **Sanitize Input**: Never pass unsanitized user input to DNS queries
6. **Handle Timeouts**: Set appropriate timeouts for each protocol

### Query Optimization
- Cache DNS responses (respect TTL)
- Batch queries when possible
- Use connection pooling for DoH
- Minimize query retries

### Security Considerations
- **DNSSEC**: Validate when available
- **DoH**: Use HTTPS for encrypted queries
- **Validation**: Verify response authenticity
- **Privacy**: No PII in DNS queries

## Native Module Integration

### Query Execution
```typescript
import DNSNative from '@modules/dns-native';

// Query via native module
const response = await DNSNative.queryDNS({
  hostname: sanitizedHostname,
  recordType: 'TXT',
  server: dnsServer,
  timeout: 5000,
  protocol: 'UDP' // or 'TCP', 'HTTPS'
});
```

### Error Handling
- Native module returns platform-specific errors
- Map to application error codes
- Provide user-friendly error messages
- Log technical details for debugging

## Testing

### Unit Tests
- [__tests__/dnsService.spec.ts](mdc:__tests__/dnsService.spec.ts) - Core functionality
- [__tests__/dnsService.parse.spec.ts](mdc:__tests__/dnsService.parse.spec.ts) - Response parsing
- [__tests__/dnsService.pipeline.spec.ts](mdc:__tests__/dnsService.pipeline.spec.ts) - Query pipeline
- [__tests__/dnsService.rateLimit.spec.ts](mdc:__tests__/dnsService.rateLimit.spec.ts) - Rate limiting
- [__tests__/dnsService.nativeRetry.spec.ts](mdc:__tests__/dnsService.nativeRetry.spec.ts) - Retry logic

### Integration Tests
```bash
# Smoke test DNS connectivity
node test-dns-simple.js

# Full integration test
npm run test:integration
```

## Logging & Debugging

### DNS Query Logs
- All queries logged via [dnsLogService](mdc:src/services/dnsLogService.ts)
- View logs in app's Logs screen
- Filter by success/failure, protocol, timestamp
- Export logs for debugging

### Debug Mode
- Enable verbose logging in settings
- Shows raw DNS responses
- Displays timing information
- Useful for troubleshooting network issues

## Performance Metrics
- Query latency: Target < 100ms for UDP
- Fallback time: Max 5s for all attempts
- Cache hit rate: Target > 80%
- Error rate: Target < 1%

## Future Enhancements
- Support for DNS-over-TLS (DoT)
- Multi-server querying for redundancy
- Advanced caching strategies
- Compression for large messages

## References
- [DNS Service Implementation](mdc:src/services/dnsService.ts)
- [Native Module](mdc:modules/dns-native/index.ts)
- [DNS Constants](mdc:modules/dns-native/constants.ts)
- [DNS Logging](mdc:src/services/dnsLogService.ts)
