---
description: "UI styling, theming, and design system guidelines"
---
# UI Styling & Design System

## Theme System

### Theme Provider
- **Location**: [src/theme/](mdc:src/theme/)
- **Context**: [src/theme/ThemeProvider.tsx](mdc:src/theme/ThemeProvider.tsx)
- **Colors**: [src/theme/colors.ts](mdc:src/theme/colors.ts)

### Theme Structure
```typescript
interface Theme {
  colors: {
    primary: string;
    secondary: string;
    background: string;
    surface: string;
    text: string;
    error: string;
    success: string;
    // ... more colors
  };
  spacing: {
    xs: number;
    sm: number;
    md: number;
    lg: number;
    xl: number;
  };
  typography: {
    // Font families, sizes, weights
  };
}
```

## Component Styling Guidelines

### Style Approach
1. **Use Theme**: Always use theme values for colors, spacing
2. **StyleSheet.create**: Use React Native's StyleSheet for performance
3. **Responsive**: Consider different screen sizes
4. **Accessibility**: Maintain WCAG contrast ratios

### Example Component
```typescript
import { useTheme } from '@/theme/ThemeProvider';
import { StyleSheet } from 'react-native';

export function MyComponent() {
  const { theme } = useTheme();
  
  return (
    <View style={[styles.container, { backgroundColor: theme.colors.surface }]}>
      {/* Content */}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    padding: 16,
    borderRadius: 8,
  },
});
```

## Native UI Effects

### Liquid Glass (iOS 26+)
- **Module**: [ios/LiquidGlassNative/](mdc:ios/LiquidGlassNative/)
- **Component**: [src/components/LiquidGlass.tsx](mdc:src/components/LiquidGlass.tsx) (if exists)
- **Usage**: Native glass morphism effects for modern iOS
- **Fallback**: Graceful degradation on older iOS versions

```typescript
// Use Liquid Glass for modern glass effects
import { LiquidGlass } from '@/components/LiquidGlass';

<LiquidGlass intensity="regular">
  <View>{/* Content with glass effect */}</View>
</LiquidGlass>
```

### Tab Bar Styling
- **Location**: [app/(app)/_layout.tsx](mdc:app/(app)/_layout.tsx)
- **Native Tabs**: Uses native tab bar with platform-specific styling
- **Icons**: SF Symbols on iOS, Material Icons on Android

## Component Library

### Core Components
All reusable components in [src/components/](mdc:src/components/):
- **ChatBubble**: Message display
- **Input**: Text input with theming
- **Button**: Themed buttons
- **Card**: Container component
- **LoadingSpinner**: Activity indicator
- **ErrorBoundary**: Error handling UI

### Component Guidelines
1. **Props**: Use TypeScript interfaces for all props
2. **Defaults**: Provide sensible default props
3. **Theming**: Support theme customization
4. **Accessibility**: Add accessibilityLabel, accessibilityRole
5. **Testing**: Write tests for each component

## Layout Patterns

### Screen Layout
```typescript
<SafeAreaView style={styles.container}>
  <View style={styles.header}>
    {/* Header content */}
  </View>
  
  <ScrollView style={styles.content}>
    {/* Main content */}
  </ScrollView>
  
  <View style={styles.footer}>
    {/* Footer/actions */}
  </View>
</SafeAreaView>
```

### Responsive Design
- Use Dimensions API for screen size
- Support portrait and landscape
- Test on different device sizes (iPhone SE to iPad Pro)
- Use flexbox for flexible layouts

## Typography

### Font System
- **iOS**: San Francisco (system font)
- **Android**: Roboto (system font)
- **Sizes**: Defined in theme (12, 14, 16, 18, 24, 32, 40)
- **Weights**: regular (400), medium (500), semibold (600), bold (700)

### Text Components
```typescript
<Text style={[styles.text, { color: theme.colors.text }]}>
  Content
</Text>
```

## Color System

### Color Palette
- **Primary**: Brand color (used for CTAs, highlights)
- **Secondary**: Supporting color
- **Background**: App background
- **Surface**: Card/component backgrounds
- **Text**: Primary text color
- **Text Secondary**: Muted text
- **Error**: Error states
- **Success**: Success states
- **Warning**: Warning states

### Dark Mode Support
- All colors defined for both light and dark themes
- Use semantic color names, not literal colors
- Test in both modes
- Respect system preference

## Spacing System

### Spacing Scale
```typescript
const spacing = {
  xs: 4,
  sm: 8,
  md: 16,
  lg: 24,
  xl: 32,
  xxl: 48,
};
```

### Usage
- Consistent spacing throughout app
- Use theme spacing values
- Avoid magic numbers

## Icons

### Icon System
- **iOS**: SF Symbols (via expo-symbols or native)
- **Android**: Material Icons
- **Custom**: SVG icons in [src/assets/](mdc:src/assets/)

### Icon Usage
```typescript
import { Ionicons } from '@expo/vector-icons';

<Ionicons 
  name="chatbubble" 
  size={24} 
  color={theme.colors.primary} 
/>
```

## Animation

### Animation Guidelines
1. **Subtle**: Avoid jarring animations
2. **Purposeful**: Animate to communicate state changes
3. **Fast**: Keep animations under 300ms
4. **Native**: Use native driver when possible

### Animation Libraries
- React Native Animated API
- Reanimated for complex animations
- Platform-specific animations via native modules

## Accessibility

### Accessibility Requirements
1. **Labels**: All interactive elements need accessibilityLabel
2. **Roles**: Set appropriate accessibilityRole
3. **States**: Communicate disabled/selected states
4. **Contrast**: Maintain 4.5:1 contrast ratio minimum
5. **Text Size**: Support dynamic type/font scaling
6. **Touch Targets**: Minimum 44x44 points

### Testing Accessibility
- Test with VoiceOver (iOS) and TalkBack (Android)
- Use Accessibility Inspector
- Check color contrast
- Test with large text sizes

## Performance

### Style Performance
1. **StyleSheet.create**: Use for static styles
2. **Avoid Inline**: Don't create styles in render
3. **Memoize**: Use useMemo for computed styles
4. **Flatten**: Avoid deeply nested style arrays

## Platform Differences

### iOS-Specific
- Use native blur effects
- SF Symbols for icons
- Native modal presentation styles
- Safe area handling

### Android-Specific  
- Material Design principles
- Ripple effects on touchables
- Android-specific shadows/elevation
- Back button handling

## References
- [Theme Provider](mdc:src/theme/ThemeProvider.tsx)
- [Components](mdc:src/components/)
- [React Native Docs](https://reactnative.dev/docs/style)
- [Expo UI Guidelines](https://docs.expo.dev/ui-programming/)
