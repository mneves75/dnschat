---
description: "Security best practices, encryption, and threat mitigation"
---
# Security Best Practices

## Encryption & Storage

### Storage Service Architecture
The app uses encrypted storage via [storageService](mdc:src/services/storageService.ts) with platform-native keychain integration.

### Key Security Features
1. **Encrypted Storage**: All sensitive data encrypted at rest
2. **Keychain Integration**: Encryption keys stored in iOS Keychain/Android Keystore
3. **No Plaintext Secrets**: Never store API keys, passwords in plaintext
4. **Secure Defaults**: Encryption enabled by default, cannot be disabled

### Storage Guidelines
```typescript
// ✅ CORRECT: Use storage service for sensitive data
import { storageService } from '@/services/storageService';
await storageService.setEncrypted('user_token', token);

// ❌ WRONG: Don't use AsyncStorage directly for sensitive data
import AsyncStorage from '@react-native-async-storage/async-storage';
await AsyncStorage.setItem('user_token', token); // NOT ENCRYPTED
```

### Encryption Implementation
- **Algorithm**: AES-256-GCM
- **Key Derivation**: PBKDF2 with platform keychain
- **IV Generation**: Cryptographically secure random IV per encryption
- **Authentication**: AEAD for integrity verification

## DNS Security

### Query Sanitization
Always sanitize DNS queries to prevent injection attacks:
```typescript
// Implemented in dnsService
- Remove special characters
- Validate hostname format  
- Check length limits
- Prevent command injection
- Block malicious patterns
```

### Protocol Security
1. **UDP Queries**: Fast but unencrypted
2. **TCP Queries**: Reliable fallback
3. **DNS-over-HTTPS (DoH)**: Encrypted transport, prevents eavesdropping
4. **DNSSEC**: Validate when available

### Privacy Considerations
- No PII in DNS queries
- Rotate query IDs
- Use DoH for sensitive queries
- Clear logs periodically

## Code Security

### Input Validation
```typescript
// Always validate user input
- Sanitize before DNS queries
- Validate before storage operations
- Type check at runtime (TypeScript strict mode)
- Escape special characters in UI
```

### Dependency Security
- Regular `npm audit` checks
- Keep dependencies updated
- Review native module updates
- Monitor security advisories

### API Security
- No hardcoded API keys
- Use environment variables for secrets
- Implement request signing
- Rate limit API calls

## Network Security

### Transport Layer
- Use HTTPS for all HTTP requests
- Implement certificate pinning for critical APIs
- Validate SSL certificates
- Handle man-in-the-middle scenarios

### Error Handling
- Don't leak sensitive info in errors
- Log security events securely
- Sanitize error messages shown to users
- Monitor for attack patterns

## Platform-Specific Security

### iOS Security
- **Keychain**: Store encryption keys in iOS Keychain
- **App Transport Security**: Configure properly in Info.plist
- **Code Signing**: Ensure proper signing for production
- **Entitlements**: Minimal required permissions

### Android Security
- **Keystore**: Use Android Keystore for keys
- **Permissions**: Request minimal necessary permissions
- **ProGuard**: Obfuscate sensitive code
- **SafetyNet**: Implement device attestation

## Testing Security

### Security Tests
```bash
# Run encryption tests
npm test -- encryptionService

# Run storage migration tests (security-critical)
npm test -- storageService.migration

# Run DNS sanitization tests
npm test -- dnsService
```

### Manual Security Checks
1. Review encryption key generation
2. Verify no secrets in git history
3. Check for sensitive data in logs
4. Validate input sanitization
5. Test error handling edge cases

## Threat Model

### Primary Threats
1. **DNS Spoofing**: Mitigated by DNSSEC and DoH
2. **Man-in-the-Middle**: Mitigated by DoH encryption
3. **Data at Rest**: Mitigated by encrypted storage
4. **Code Injection**: Mitigated by input sanitization
5. **Keychain Access**: Mitigated by platform security

### Attack Surfaces
- DNS queries (input/output)
- Local storage
- Network communication
- Native module bridges
- User input fields

## Security Checklist

### Before Each Commit
- [ ] No secrets in code
- [ ] Input sanitized
- [ ] Sensitive data encrypted
- [ ] Error messages sanitized
- [ ] Tests pass including security tests

### Before Each Release
- [ ] Dependency audit passed
- [ ] Encryption tests passed
- [ ] No debug logging in production
- [ ] Proper code signing
- [ ] Security review completed

## Incident Response

### If Security Issue Found
1. Assess severity and impact
2. Document the issue privately
3. Develop and test fix
4. Release patch ASAP
5. Notify users if necessary
6. Update [SECURITY.md](mdc:SECURITY.md)

## References
- [Storage Service](mdc:src/services/storageService.ts)
- [Encryption Tests](mdc:__tests__/encryptionService.crypto.spec.ts)
- [DNS Service](mdc:src/services/dnsService.ts)
- [Security Documentation](mdc:SECURITY.md)
- [Encryption Review](mdc:ENCRYPTION_CODE_REVIEW.md)
