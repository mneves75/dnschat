---
description: "Guidelines for developing iOS and Android native modules"
---
# Native Module Development Guidelines

## DNS Native Module Architecture

The DNS native module provides low-level DNS query capabilities using platform-native APIs.

### Module Structure
- **Interface**: [modules/dns-native/index.ts](mdc:modules/dns-native/index.ts) - TypeScript interface
- **iOS Implementation**: [ios/DNSNative/DNSNative.swift](mdc:ios/DNSNative/DNSNative.swift)
  - Uses Apple's Network Framework for native DNS queries
  - Supports UDP, TCP, and DNS-over-HTTPS (DoH)
  - Handles IPv4 and IPv6
- **Android Implementation**: [modules/dns-native/android/](mdc:modules/dns-native/android/)
  - Uses Android DnsResolver API (Android 10+)
  - Fallback mechanisms for older versions
- **Constants**: [modules/dns-native/constants.ts](mdc:modules/dns-native/constants.ts)

### iOS Native Module Guidelines
1. **Swift Version**: Use Swift 5.5+ with async/await where applicable
2. **Expo Modules API**: Follow Expo Modules API patterns
3. **Error Handling**: Return structured errors with codes and messages
4. **Memory Management**: Use weak references for delegates, avoid retain cycles
5. **Threading**: Perform network operations on background queues
6. **Testing**: Add unit tests in module's test directory

### Android Native Module Guidelines
1. **Java Version**: Requires Java 17 (see [android-java17.sh](mdc:android-java17.sh))
2. **Expo Modules API**: Follow Expo Modules API patterns
3. **Error Handling**: Return structured errors matching iOS format
4. **Threading**: Use proper async handling with Kotlin coroutines or Java async
5. **Permissions**: Handle network permissions properly
6. **Testing**: Add unit tests in module's test directory

### Liquid Glass Native Module (iOS 26+)
- **Implementation**: [ios/LiquidGlassNative/](mdc:ios/LiquidGlassNative/)
- **Purpose**: Provides native glass morphism effects for iOS 26+
- **API**: Exposes material effects and blur options
- **Fallback**: Gracefully degrades on older iOS versions

## Development Workflow

### Adding New Native Methods
1. Define TypeScript interface in module's index.ts
2. Implement iOS method in Swift
3. Implement Android method in Java/Kotlin
4. Add tests for both platforms
5. Update module documentation
6. Test on both physical devices and simulators

### Testing Native Modules
```bash
# Test DNS native module
cd modules/dns-native
npm test                    # Unit tests
npm run test:integration    # Integration tests (requires device/simulator)

# Test iOS module directly
npm run ios

# Test Android module directly  
npm run android
```

### Debugging Native Code
- **iOS**: Use Xcode debugger, set breakpoints in .swift files
- **Android**: Use Android Studio debugger, set breakpoints in .java files
- **Logs**: Use native logging (NSLog/Log.d) that appears in Metro bundler

## Common Patterns

### Error Handling
```typescript
// Always return structured errors
interface DNSError {
  code: string;
  message: string;
  platform?: string;
}
```

### Async Operations
```swift
// iOS - Use promises or async/await
AsyncFunction("queryDNS") { (hostname: String, recordType: String) -> String in
  // Implementation
}
```

### Type Conversions
- Always validate input types from JavaScript
- Convert platform types to portable JSON formats
- Handle null/undefined gracefully

## Platform-Specific Considerations

### iOS
- Minimum iOS version: Check [app.json](mdc:app.json)
- CocoaPods: Run `pod install` after native changes
- App Transport Security: Configure for network access
- Capabilities: Enable required entitlements

### Android
- Minimum SDK version: Check [android/app/build.gradle](mdc:android/app/build.gradle)
- Gradle: Sync after native changes
- Permissions: Declare in AndroidManifest.xml
- ProGuard: Add rules for native modules

## References
- [Native Module Guide](mdc:docs/guides/) 
- [Expo Modules API](https://docs.expo.dev/modules/)
- [iOS Network Framework](https://developer.apple.com/documentation/network)
- [Android DnsResolver](https://developer.android.com/reference/android/net/DnsResolver)
