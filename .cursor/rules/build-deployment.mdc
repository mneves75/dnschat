---
description: "Build, deployment, and version management guidelines"
---
# Build & Deployment Guidelines

## Development Commands

### Starting Development
```bash
# Start Metro bundler
npm start

# Run on iOS simulator
npm run ios

# Run on Android emulator (requires Java 17)
npm run android

# Run on web
npm run web
```

### Alternative Android Build
```bash
# If Java 17 not in PATH, use the helper script
./android-java17.sh
```

## Version Management

### Version Synchronization
Use [scripts/sync-versions.js](mdc:scripts/sync-versions.js) to keep versions in sync across:
- [package.json](mdc:package.json)
- [app.json](mdc:app.json)
- [ios/DNSChat/Info.plist](mdc:ios/DNSChat/Info.plist)
- [android/app/build.gradle](mdc:android/app/build.gradle)

```bash
# Sync versions across all platforms
npm run sync-versions

# Dry run to preview changes
npm run sync-versions:dry
```

### Version Format
- **App Version**: Semantic versioning (1.2.3)
- **Build Number**: Auto-incremented integer
- **iOS**: CFBundleShortVersionString + CFBundleVersion
- **Android**: versionName + versionCode

## iOS Build

### Prerequisites
1. **Xcode**: Latest stable version
2. **CocoaPods**: `sudo gem install cocoapods`
3. **Developer Account**: For device testing and App Store

### Build Steps
```bash
# Install dependencies
npm install

# Install pods
cd ios && pod install && cd ..

# Build for simulator
npm run ios

# Build for device
npm run ios -- --device

# Clean build if issues
cd ios
rm -rf Pods Podfile.lock
pod install
cd ..
```

### iOS Signing
- Development: Automatic signing in Xcode
- Production: Manual signing with distribution certificate
- Provisioning profiles: Manage in Apple Developer Portal

### iOS Troubleshooting
```bash
# Diagnose iOS environment
./scripts/doctor-ios.sh

# Fix CocoaPods issues
./scripts/fix-cocoapods.sh
```

## Android Build

### Prerequisites
1. **Android Studio**: Latest stable version
2. **Java 17**: Required (not Java 11 or 21)
3. **Android SDK**: API 33+ (see [android/app/build.gradle](mdc:android/app/build.gradle))

### Verify Java Version
```bash
java -version
# Should show version 17.x.x
```

### Build Steps
```bash
# Install dependencies
npm install

# Build for emulator
npm run android

# Build APK
cd android
./gradlew assembleRelease
cd ..

# Build AAB for Play Store
cd android
./gradlew bundleRelease
cd ..
```

### Android Signing
- Development: Debug keystore (auto-generated)
- Production: Release keystore (not in repo)
- Store keystore in secure location
- Configure in [android/app/build.gradle](mdc:android/app/build.gradle)

### Android Troubleshooting
```bash
# Clean build
cd android
./gradlew clean
cd ..

# Check Java version
java -version

# Use specific Java version
./android-java17.sh
```

## EAS Build (Expo Application Services)

### Configuration
EAS build config in [eas.json](mdc:eas.json):
- Development builds
- Preview builds
- Production builds

### EAS Commands
```bash
# Install EAS CLI
npm install -g eas-cli

# Login
eas login

# Configure project
eas build:configure

# Build for iOS (development)
eas build --platform ios --profile development

# Build for Android (production)
eas build --platform android --profile production

# Build for both platforms
eas build --platform all
```

### Build Profiles
- **development**: Local development, includes dev client
- **preview**: Internal testing, TestFlight/internal distribution
- **production**: App Store/Play Store submission

## Testing Builds

### Local Testing
```bash
# DNS connectivity test
node test-dns-simple.js

# Run unit tests
npm test

# Run native module tests
cd modules/dns-native && npm test
```

### Device Testing
1. **iOS**: Install via Xcode or TestFlight
2. **Android**: Install APK via `adb install`
3. **Real DNS**: Test with actual DNS servers
4. **Network Conditions**: Test on WiFi, cellular, offline

## Release Process

### Pre-Release Checklist
- [ ] Version bumped via `npm run sync-versions`
- [ ] CHANGELOG.md updated
- [ ] All tests passing
- [ ] DNS connectivity verified
- [ ] Build successful on both platforms
- [ ] No secrets in code
- [ ] Code signing configured
- [ ] Release notes prepared

### iOS Release
1. Build with EAS or Xcode
2. Archive and upload to TestFlight
3. Submit for App Store review
4. Monitor review status
5. Release to App Store

### Android Release
1. Build AAB with EAS or Gradle
2. Upload to Play Console
3. Create internal/closed testing release
4. Promote to production
5. Monitor rollout

## Environment Variables

### Configuration
- Don't commit `.env` files
- Use `app.json` for public config
- Use EAS Secrets for sensitive values

### EAS Secrets
```bash
# Set secret
eas secret:create --scope project --name MY_SECRET --value "secret-value"

# List secrets
eas secret:list
```

## Build Artifacts

### iOS Artifacts
- `.app` - Simulator build
- `.ipa` - Device/App Store build
- `dSYM` - Debug symbols

### Android Artifacts
- `.apk` - Debug/release APK
- `.aab` - Play Store bundle
- `mapping.txt` - ProGuard mapping

## CI/CD Integration

### GitHub Actions (if configured)
- Automated tests on PR
- Build verification
- Version checks
- Security scans

### Best Practices
1. Run tests before build
2. Validate version consistency
3. Check for secrets in code
4. Verify signing configuration
5. Test on real devices before release

## Performance Monitoring

### Build Performance
- Monitor build times
- Optimize native modules
- Cache dependencies
- Use EAS build cache

### App Performance
- Monitor app size
- Check startup time
- Profile JS bundle
- Optimize images and assets

## Troubleshooting

### Common Build Issues
1. **CocoaPods**: Run `./scripts/fix-cocoapods.sh`
2. **Java Version**: Ensure Java 17 is active
3. **Metro Cache**: Clear with `npx expo start --clear`
4. **Node Modules**: Delete and reinstall
5. **Native Cache**: Clean iOS/Android build folders

### Getting Help
- Check [TROUBLESHOOTING.md](mdc:docs/TROUBLESHOOTING.md)
- Run diagnostics: `./scripts/doctor-ios.sh`
- Review [INSTALL.md](mdc:INSTALL.md)
- Check [docs/guides/](mdc:docs/guides/)

## References
- [EAS Build Docs](https://docs.expo.dev/build/introduction/)
- [Version Sync Script](mdc:scripts/sync-versions.js)
- [EAS Configuration](mdc:eas.json)
- [App Configuration](mdc:app.json)
- [Troubleshooting Guide](mdc:docs/TROUBLESHOOTING.md)
